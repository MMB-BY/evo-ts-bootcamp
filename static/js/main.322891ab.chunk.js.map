{"version":3,"sources":["components/pillar/pillar.tsx","utils/arrayWithRandomValues.ts","utils/randomValueGenerator.ts","utils/bubbleSort.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Pillar","state","arr","props","array","this","map","el","className","style","height","Component","arrayWithRandomValues","Array","from","length","Math","random","Sorted","bubbleSort","i","bubble","App","interval","status","sorting","setInterval","setState","pause","clearInterval","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAUaA,EAAb,4MACEC,MAAQ,CAAEC,IAAK,EAAKC,MAAMC,OAD5B,4CAGE,WACE,OAAOC,KAAKJ,MAAMC,IAAII,KAAI,SAACC,GAAD,OACxB,qBAAKC,UAAU,SAASC,MAAO,CAAEC,OAAQH,EAAK,eALpD,GAA4BI,aCRrB,SAASC,IACZ,OAAOC,MAAMC,KAAK,CAACC,OAAQ,KAAKT,KAAI,SAAAC,GAAE,OCF1B,EAEC,IAAAS,KAAKC,Y,gBCHXC,GAAkB,EAEtB,SAASC,EAAWjB,GACvB,IAAK,IAAIkB,EAAI,EAAGA,EAAIlB,EAAIa,OAAQK,IAAK,CACjC,IAAIC,EAAS,EACb,GAAInB,EAAIkB,EAAE,GAAKlB,EAAIkB,GAIjB,OAHAC,EAASnB,EAAIkB,GACblB,EAAIkB,GAAKlB,EAAIkB,EAAE,GACflB,EAAIkB,EAAE,GAAKC,EACJnB,EAIb,OADAgB,GAAS,EACFhB,ECPX,IAmDeoB,EA3Cf,4MACEC,cADF,IAGItB,MAAQ,CACNC,IAAMU,IACNY,OAAQ,WALd,EAQEC,QAAU,WACR,EAAKF,SAAWG,aAAY,WACxB,EAAKC,SAAS,CAACzB,IAAKiB,EAAW,EAAKlB,MAAMC,KAAMsB,OAAQ,YACpDN,GACJ,EAAKS,SAAS,CAACzB,IAAKiB,EAAW,EAAKlB,MAAMC,KAAMsB,OAAQ,aApBlD,MAQd,EAiBEI,MAAQ,WACF,EAAKL,WACPM,cAAc,EAAKN,UACnB,EAAKI,UAAS,iBAAO,CAACzB,IAAK,EAAKD,MAAMC,IAAKsB,OAAQ,cApBzD,4CAwBE,WAAU,IAAD,OACP,OACE,qBAAKhB,UAAU,MAAf,SACI,sBAAKA,UAAY,OAAjB,UACE,qBAAKA,UAAY,QAAjB,yBACA,qBAAKA,UAAY,kBAAjB,SACE,cAAC,EAAD,CAAQJ,MAASC,KAAKJ,MAAMC,QAE9B,qBAAKM,UAAW,SAAhB,SAA0BH,KAAKJ,MAAMuB,SACrC,sBAAKhB,UAAY,kBAAjB,UACE,wBAAQsB,QAAW,kBAAM,EAAKF,SAA9B,mBACA,wBAAQE,QAAW,kBAAM,EAAKL,WAA9B,8BAnCd,GAAyBd,aCAVoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.322891ab.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport { bubbleSort } from \"../../utils/bubbleSort\";\r\n\r\ninterface PropsInterface {\r\n  array: number[];\r\n}\r\ninterface StateInterface {\r\n  arr: number[];\r\n}\r\n\r\nexport class Pillar extends Component<PropsInterface, StateInterface> {\r\n  state = { arr: this.props.array };\r\n\r\n  render() {\r\n    return this.state.arr.map((el) => (\r\n      <div className=\"pillar\" style={{ height: el + \"px\" }}></div>\r\n    ));\r\n  }\r\n}\r\n","import {randomValue} from './randomValueGenerator';\r\n\r\nexport function arrayWithRandomValues(): number[] {\r\n    return Array.from({length: 30}).map(el => el = randomValue());\r\n}","export function randomValue(): number {\r\n    const min = 1;\r\n    const max = 200;\r\n    return min + Math.random() * (max - min);\r\n}","export let Sorted: boolean = false;\r\n\r\nexport function bubbleSort(arr: number[]): number[] {\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let bubble = 0;\r\n        if (arr[i+1] < arr[i]) {\r\n          bubble = arr[i];\r\n          arr[i] = arr[i+1];\r\n          arr[i+1] = bubble;\r\n          return arr;\r\n        }\r\n    }\r\n    Sorted = true;\r\n    return arr;\r\n  }\r\n  ","import React, { Component } from 'react';\nimport {Pillar} from './components/pillar/pillar';\nimport {arrayWithRandomValues} from \"./utils/arrayWithRandomValues\"\nimport './App.css';\nimport './components/pillar/pillar.css';\nimport {bubbleSort, Sorted} from \"./utils/bubbleSort\";\nconst delay = 100;\ninterface PropsInterface {\n}\ninterface AppInterface {\n  arr: number[];\n  status: string;\n}\n\nexport class App extends Component<PropsInterface,AppInterface>{\n  interval: NodeJS.Timer | undefined;\n\n    state = { \n      arr:  arrayWithRandomValues(),\n      status: 'pending'\n    };\n  \n  sorting = () => {\n    this.interval = setInterval(() => {\n        this.setState({arr: bubbleSort(this.state.arr), status: 'sorting'});\n        if (Sorted) {\n        this.setState({arr: bubbleSort(this.state.arr), status: 'SORTED'});\n        }\n    },delay);\n  }\n\n  pause = () => {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.setState(() => ({arr: this.state.arr, status: 'pause'}));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div className = \"game\">\n            <div className = \"title\">Bubble Sort</div>\n            <div className = \"pillarContainer\">\n              <Pillar array = {this.state.arr}/>\n            </div>\n            <div className= \"status\">{this.state.status}</div>\n            <div className = \"buttonContainer\">\n              <button onClick = {() => this.pause()} >pause</button>\n              <button onClick = {() => this.sorting()} >sort</button>\n            </div>\n          </div>\n      </div>\n    );\n}\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Pillar} from './components/pillar/pillar';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}